"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestCafeVersionIncompatibledError = exports.createTestCafeVersionInvalidError = exports.createGithubInfoError = exports.createReporterMethodName = exports.createLongBuildIdError = exports.createGetUploadInfoError = exports.createWarningUploadError = exports.createTestUploadError = exports.createFileUploadError = exports.createReportUrlMessage = exports.FETCH_NETWORK_CONNECTION_ERROR = exports.AUTHENTICATION_TOKEN_REJECTED = exports.AUTHENTICATION_TOKEN_INVALID = exports.AUTHENTICATION_TOKEN_NOT_DEFINED = exports.DASHBOARD_LOCATION_NOT_DEFINED = void 0;
const consts_1 = require("./consts");
const create_report_url_1 = __importDefault(require("./create-report-url"));
exports.DASHBOARD_LOCATION_NOT_DEFINED = 'The \'TESTCAFE_DASHBOARD_URL\' environment variable is not defined.';
exports.AUTHENTICATION_TOKEN_NOT_DEFINED = 'Your TestCafe setup does not contain a TestCafe Dashboard token.';
exports.AUTHENTICATION_TOKEN_INVALID = 'The TestCafe Dashboard token is not valid. Check the value for typos.';
exports.AUTHENTICATION_TOKEN_REJECTED = 'TestCafe Dashboard rejected the authentication token. Confirm that the token has not been revoked.';
exports.FETCH_NETWORK_CONNECTION_ERROR = 'Connection failed';
exports.createReportUrlMessage = (reportId, authenticationToken, dashboardUrl) => {
    return `Task execution report: ${create_report_url_1.default(reportId, dashboardUrl, authenticationToken)}`;
};
exports.createFileUploadError = (uploadId, filePath) => `Failed to upload visual artifacts. Upload ID: ${uploadId}, file path: ${filePath}.`;
exports.createTestUploadError = (uploadId, testName) => `Failed to upload a test log. Upload ID: ${uploadId}, test name: ${testName}.`;
exports.createWarningUploadError = (uploadId, uploadEntityId) => `Failed to upload warning data. Upload ID: ${uploadId}, upload entity id: ${uploadEntityId}.`;
exports.createGetUploadInfoError = (uploadEntityId, response) => `Failed to get an upload URL. Upload entity ID: ${uploadEntityId}. Response: ${response}`;
exports.createLongBuildIdError = (buildId) => `Error: The Build ID exceeds the maximum length of ${consts_1.MAX_BUILD_ID_LENGTH} characters. Build ID: ${buildId}.`;
exports.createReporterMethodName = (reporterMethodName, errorDetails) => `Error: The "dashboard" reporter could not successfully execute the "${reporterMethodName}" method. Error details: ${errorDetails}`;
exports.createGithubInfoError = (error) => `Cannot retrieve information from the Github Actions environment due to an error: ${error}`;
exports.createTestCafeVersionInvalidError = (tcVersion) => `Unrecognized version of TestCafe: ${tcVersion}`;
exports.createTestCafeVersionIncompatibledError = (tcVersion) => `TestCafe ${tcVersion} is not compatible with TestCafe Dashboard. Please update the "testcafe" package.`;
