"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandTransformerFactory = void 0;
const types_1 = require("../types");
const navigate_1 = require("./navigate");
const set_viewport_1 = require("./set-viewport");
const click_1 = require("./click");
const change_1 = require("./change");
const key_down_1 = require("./key-down");
const key_up_1 = require("./key-up");
const scroll_1 = require("./scroll");
const wait_for_expression_1 = require("./wait-for-expression");
const wait_for_element_1 = require("./wait-for-element");
class CommandTransformerFactory {
    static create(step, callsite) {
        switch (step.type) {
            case types_1.DEVTOOLS_COMMAND_TYPE.navigate: return new navigate_1.NavigateCommandTransformer(step, callsite);
            case types_1.DEVTOOLS_COMMAND_TYPE.setViewport: return new set_viewport_1.SetViewportCommandTransformer(step, callsite);
            case types_1.DEVTOOLS_COMMAND_TYPE.click: return new click_1.ClickCommandTransformer(step, callsite);
            case types_1.DEVTOOLS_COMMAND_TYPE.change: return new change_1.ChangeCommandTransformer(step, callsite);
            case types_1.DEVTOOLS_COMMAND_TYPE.keyDown: return new key_down_1.KeyDownCommandTransformer(step, callsite);
            case types_1.DEVTOOLS_COMMAND_TYPE.keyUp: return new key_up_1.KeyUpCommandTransformer(step, callsite);
            case types_1.DEVTOOLS_COMMAND_TYPE.scroll: return new scroll_1.ScrollCommandTransformer(step, callsite);
            case types_1.DEVTOOLS_COMMAND_TYPE.waitForExpression: return new wait_for_expression_1.WaitForExpressionCommandTransformer(step, callsite);
            case types_1.DEVTOOLS_COMMAND_TYPE.waitForElement: return new wait_for_element_1.WaitForElementCommandTransformer(step, callsite);
            case types_1.DEVTOOLS_COMMAND_TYPE.close: return null;
        }
        throw new Error('Incorrect command: ' + step.type);
    }
}
exports.CommandTransformerFactory = CommandTransformerFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlci90ZXN0LWZpbGUvZm9ybWF0cy9kZXYtdG9vbHMvY29tbWFuZHMvZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvQ0FBdUU7QUFDdkUseUNBQXdEO0FBQ3hELGlEQUErRDtBQUMvRCxtQ0FBa0Q7QUFDbEQscUNBQW9EO0FBQ3BELHlDQUF1RDtBQUN2RCxxQ0FBbUQ7QUFDbkQscUNBQW9EO0FBQ3BELCtEQUE0RTtBQUM1RSx5REFBc0U7QUFHdEUsTUFBYSx5QkFBeUI7SUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBRSxJQUEwQixFQUFFLFFBQWdCO1FBQ3ZELFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNmLEtBQUssNkJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxJQUFJLHFDQUEwQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMzRixLQUFLLDZCQUFxQixDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sSUFBSSw0Q0FBNkIsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDakcsS0FBSyw2QkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLElBQUksK0JBQXVCLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3JGLEtBQUssNkJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxJQUFJLGlDQUF3QixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN2RixLQUFLLDZCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxvQ0FBeUIsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDekYsS0FBSyw2QkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLElBQUksZ0NBQXVCLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3JGLEtBQUssNkJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxJQUFJLGlDQUF3QixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN2RixLQUFLLDZCQUFxQixDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxJQUFJLHlEQUFtQyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUM3RyxLQUFLLDZCQUFxQixDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxtREFBZ0MsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDdkcsS0FBSyw2QkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQztTQUNqRDtRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQWpCRCw4REFpQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERVZUT09MU19DT01NQU5EX1RZUEUsIERldlRvb2xzUmVjb3JkZXJTdGVwIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgTmF2aWdhdGVDb21tYW5kVHJhbnNmb3JtZXIgfSBmcm9tICcuL25hdmlnYXRlJztcbmltcG9ydCB7IFNldFZpZXdwb3J0Q29tbWFuZFRyYW5zZm9ybWVyIH0gZnJvbSAnLi9zZXQtdmlld3BvcnQnO1xuaW1wb3J0IHsgQ2xpY2tDb21tYW5kVHJhbnNmb3JtZXIgfSBmcm9tICcuL2NsaWNrJztcbmltcG9ydCB7IENoYW5nZUNvbW1hbmRUcmFuc2Zvcm1lciB9IGZyb20gJy4vY2hhbmdlJztcbmltcG9ydCB7IEtleURvd25Db21tYW5kVHJhbnNmb3JtZXIgfSBmcm9tICcuL2tleS1kb3duJztcbmltcG9ydCB7IEtleVVwQ29tbWFuZFRyYW5zZm9ybWVyIH0gZnJvbSAnLi9rZXktdXAnO1xuaW1wb3J0IHsgU2Nyb2xsQ29tbWFuZFRyYW5zZm9ybWVyIH0gZnJvbSAnLi9zY3JvbGwnO1xuaW1wb3J0IHsgV2FpdEZvckV4cHJlc3Npb25Db21tYW5kVHJhbnNmb3JtZXIgfSBmcm9tICcuL3dhaXQtZm9yLWV4cHJlc3Npb24nO1xuaW1wb3J0IHsgV2FpdEZvckVsZW1lbnRDb21tYW5kVHJhbnNmb3JtZXIgfSBmcm9tICcuL3dhaXQtZm9yLWVsZW1lbnQnO1xuaW1wb3J0IHsgQ29tbWFuZFRyYW5zZm9ybWVyQmFzZSB9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBDb21tYW5kVHJhbnNmb3JtZXJGYWN0b3J5IHtcbiAgICBzdGF0aWMgY3JlYXRlIChzdGVwOiBEZXZUb29sc1JlY29yZGVyU3RlcCwgY2FsbHNpdGU6IG51bWJlcik6IENvbW1hbmRUcmFuc2Zvcm1lckJhc2UgfCBudWxsIHtcbiAgICAgICAgc3dpdGNoIChzdGVwLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgREVWVE9PTFNfQ09NTUFORF9UWVBFLm5hdmlnYXRlOiByZXR1cm4gbmV3IE5hdmlnYXRlQ29tbWFuZFRyYW5zZm9ybWVyKHN0ZXAsIGNhbGxzaXRlKTtcbiAgICAgICAgICAgIGNhc2UgREVWVE9PTFNfQ09NTUFORF9UWVBFLnNldFZpZXdwb3J0OiByZXR1cm4gbmV3IFNldFZpZXdwb3J0Q29tbWFuZFRyYW5zZm9ybWVyKHN0ZXAsIGNhbGxzaXRlKTtcbiAgICAgICAgICAgIGNhc2UgREVWVE9PTFNfQ09NTUFORF9UWVBFLmNsaWNrOiByZXR1cm4gbmV3IENsaWNrQ29tbWFuZFRyYW5zZm9ybWVyKHN0ZXAsIGNhbGxzaXRlKTtcbiAgICAgICAgICAgIGNhc2UgREVWVE9PTFNfQ09NTUFORF9UWVBFLmNoYW5nZTogcmV0dXJuIG5ldyBDaGFuZ2VDb21tYW5kVHJhbnNmb3JtZXIoc3RlcCwgY2FsbHNpdGUpO1xuICAgICAgICAgICAgY2FzZSBERVZUT09MU19DT01NQU5EX1RZUEUua2V5RG93bjogcmV0dXJuIG5ldyBLZXlEb3duQ29tbWFuZFRyYW5zZm9ybWVyKHN0ZXAsIGNhbGxzaXRlKTtcbiAgICAgICAgICAgIGNhc2UgREVWVE9PTFNfQ09NTUFORF9UWVBFLmtleVVwOiByZXR1cm4gbmV3IEtleVVwQ29tbWFuZFRyYW5zZm9ybWVyKHN0ZXAsIGNhbGxzaXRlKTtcbiAgICAgICAgICAgIGNhc2UgREVWVE9PTFNfQ09NTUFORF9UWVBFLnNjcm9sbDogcmV0dXJuIG5ldyBTY3JvbGxDb21tYW5kVHJhbnNmb3JtZXIoc3RlcCwgY2FsbHNpdGUpO1xuICAgICAgICAgICAgY2FzZSBERVZUT09MU19DT01NQU5EX1RZUEUud2FpdEZvckV4cHJlc3Npb246IHJldHVybiBuZXcgV2FpdEZvckV4cHJlc3Npb25Db21tYW5kVHJhbnNmb3JtZXIoc3RlcCwgY2FsbHNpdGUpO1xuICAgICAgICAgICAgY2FzZSBERVZUT09MU19DT01NQU5EX1RZUEUud2FpdEZvckVsZW1lbnQ6IHJldHVybiBuZXcgV2FpdEZvckVsZW1lbnRDb21tYW5kVHJhbnNmb3JtZXIoc3RlcCwgY2FsbHNpdGUpO1xuICAgICAgICAgICAgY2FzZSBERVZUT09MU19DT01NQU5EX1RZUEUuY2xvc2U6IHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmNvcnJlY3QgY29tbWFuZDogJyArIHN0ZXAudHlwZSk7XG4gICAgfVxufVxuIl19