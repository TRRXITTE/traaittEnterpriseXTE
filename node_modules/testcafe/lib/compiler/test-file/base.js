"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const test_page_url_1 = require("../../api/test-page-url");
const type_assertions_1 = require("../../errors/runtime/type-assertions");
class TestFileCompilerBase {
    constructor({ baseUrl }) {
        const escapedExt = lodash_1.flatten([this.getSupportedExtension()])
            .map(ext => lodash_1.escapeRegExp(ext))
            .join('|');
        this.supportedExtensionRe = new RegExp(`(${escapedExt})$`);
        this._ensureBaseUrl(baseUrl);
    }
    _ensureBaseUrl(url) {
        if (!url)
            return;
        this.baseUrl = url;
        type_assertions_1.assertType(type_assertions_1.is.string, '_ensureBaseUrl', 'The base URL', this.baseUrl);
        test_page_url_1.assertBaseUrl(this.baseUrl, '_ensureBaseUrl');
        this.baseUrl = test_page_url_1.getUrl(this.baseUrl);
    }
    _hasTests( /* code */) {
        throw new Error('Not implemented');
    }
    getSupportedExtension() {
        throw new Error('Not implemented');
    }
    async precompile( /* testFilesInfo */) {
        throw new Error('Not implemented');
    }
    async compile( /* code, filename */) {
        throw new Error('Not implemented');
    }
    async execute( /* compiledCode, filename */) {
        throw new Error('Not implemented');
    }
    canCompile(code, filename) {
        return this.supportedExtensionRe.test(filename);
    }
    get canPrecompile() {
        return false;
    }
    cleanUp() {
        // NOTE: Optional. Do nothing by default.
    }
}
exports.default = TestFileCompilerBase;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlci90ZXN0LWZpbGUvYmFzZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUEyRDtBQUMzRCwyREFBZ0U7QUFDaEUsMEVBQXNFO0FBRXRFLE1BQXFCLG9CQUFvQjtJQUNyQyxZQUFhLEVBQUUsT0FBTyxFQUFFO1FBQ3BCLE1BQU0sVUFBVSxHQUFHLGdCQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO2FBQ3JELEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLHFCQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWYsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksTUFBTSxDQUFDLElBQUksVUFBVSxJQUFJLENBQUMsQ0FBQztRQUUzRCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxjQUFjLENBQUUsR0FBRztRQUNmLElBQUksQ0FBQyxHQUFHO1lBQ0osT0FBTztRQUVYLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1FBRW5CLDRCQUFVLENBQUMsb0JBQUUsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RSw2QkFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsT0FBTyxHQUFHLHNCQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxTQUFTLEVBQUUsVUFBVTtRQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELHFCQUFxQjtRQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVLEVBQUUsbUJBQW1CO1FBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sRUFBRSxvQkFBb0I7UUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxFQUFFLDRCQUE0QjtRQUN2QyxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELFVBQVUsQ0FBRSxJQUFJLEVBQUUsUUFBUTtRQUN0QixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELElBQUksYUFBYTtRQUNiLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxPQUFPO1FBQ0gseUNBQXlDO0lBQzdDLENBQUM7Q0FDSjtBQXRERCx1Q0FzREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlc2NhcGVSZWdFeHAgYXMgZXNjYXBlUmUsIGZsYXR0ZW4gfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgYXNzZXJ0QmFzZVVybCwgZ2V0VXJsIH0gZnJvbSAnLi4vLi4vYXBpL3Rlc3QtcGFnZS11cmwnO1xuaW1wb3J0IHsgYXNzZXJ0VHlwZSwgaXMgfSBmcm9tICcuLi8uLi9lcnJvcnMvcnVudGltZS90eXBlLWFzc2VydGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXN0RmlsZUNvbXBpbGVyQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKHsgYmFzZVVybCB9KSB7XG4gICAgICAgIGNvbnN0IGVzY2FwZWRFeHQgPSBmbGF0dGVuKFt0aGlzLmdldFN1cHBvcnRlZEV4dGVuc2lvbigpXSlcbiAgICAgICAgICAgIC5tYXAoZXh0ID0+IGVzY2FwZVJlKGV4dCkpXG4gICAgICAgICAgICAuam9pbignfCcpO1xuXG4gICAgICAgIHRoaXMuc3VwcG9ydGVkRXh0ZW5zaW9uUmUgPSBuZXcgUmVnRXhwKGAoJHtlc2NhcGVkRXh0fSkkYCk7XG5cbiAgICAgICAgdGhpcy5fZW5zdXJlQmFzZVVybChiYXNlVXJsKTtcbiAgICB9XG5cbiAgICBfZW5zdXJlQmFzZVVybCAodXJsKSB7XG4gICAgICAgIGlmICghdXJsKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuYmFzZVVybCA9IHVybDtcblxuICAgICAgICBhc3NlcnRUeXBlKGlzLnN0cmluZywgJ19lbnN1cmVCYXNlVXJsJywgJ1RoZSBiYXNlIFVSTCcsIHRoaXMuYmFzZVVybCk7XG4gICAgICAgIGFzc2VydEJhc2VVcmwodGhpcy5iYXNlVXJsLCAnX2Vuc3VyZUJhc2VVcmwnKTtcblxuICAgICAgICB0aGlzLmJhc2VVcmwgPSBnZXRVcmwodGhpcy5iYXNlVXJsKTtcbiAgICB9XG5cbiAgICBfaGFzVGVzdHMgKC8qIGNvZGUgKi8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG5cbiAgICBnZXRTdXBwb3J0ZWRFeHRlbnNpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cblxuICAgIGFzeW5jIHByZWNvbXBpbGUgKC8qIHRlc3RGaWxlc0luZm8gKi8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG5cbiAgICBhc3luYyBjb21waWxlICgvKiBjb2RlLCBmaWxlbmFtZSAqLykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUgKC8qIGNvbXBpbGVkQ29kZSwgZmlsZW5hbWUgKi8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG5cbiAgICBjYW5Db21waWxlIChjb2RlLCBmaWxlbmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdXBwb3J0ZWRFeHRlbnNpb25SZS50ZXN0KGZpbGVuYW1lKTtcbiAgICB9XG5cbiAgICBnZXQgY2FuUHJlY29tcGlsZSAoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjbGVhblVwICgpIHtcbiAgICAgICAgLy8gTk9URTogT3B0aW9uYWwuIERvIG5vdGhpbmcgYnkgZGVmYXVsdC5cbiAgICB9XG59XG4iXX0=