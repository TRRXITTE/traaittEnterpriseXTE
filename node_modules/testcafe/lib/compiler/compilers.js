"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initTestFileCompilers = exports.getTestFileCompilers = void 0;
const testcafe_hammerhead_1 = __importDefault(require("testcafe-hammerhead"));
const testcafe_legacy_api_1 = require("testcafe-legacy-api");
const compiler_1 = __importDefault(require("./test-file/formats/es-next/compiler"));
const compiler_2 = __importDefault(require("./test-file/formats/typescript/compiler"));
const compiler_3 = __importDefault(require("./test-file/formats/coffeescript/compiler"));
const raw_1 = __importDefault(require("./test-file/formats/raw"));
const compiler_4 = __importDefault(require("./test-file/formats/dev-tools/compiler"));
const customizable_compilers_1 = __importDefault(require("../configuration/customizable-compilers"));
function createTestFileCompilers(compilerOptions = {}, { isCompilerServiceMode, baseUrl } = {}) {
    return [
        new testcafe_legacy_api_1.Compiler(testcafe_hammerhead_1.default.processScript),
        new compiler_1.default({ isCompilerServiceMode, baseUrl }),
        new compiler_2.default(compilerOptions[customizable_compilers_1.default.typescript], { isCompilerServiceMode, baseUrl }),
        new compiler_3.default({ baseUrl }),
        new raw_1.default({ baseUrl }),
        new compiler_4.default({ baseUrl }),
    ];
}
let testFileCompilers = [];
function getTestFileCompilers() {
    if (!testFileCompilers.length)
        initTestFileCompilers();
    return testFileCompilers;
}
exports.getTestFileCompilers = getTestFileCompilers;
function initTestFileCompilers(compilerOptions, { isCompilerServiceMode, baseUrl } = {}) {
    testFileCompilers = createTestFileCompilers(compilerOptions, { isCompilerServiceMode, baseUrl });
}
exports.initTestFileCompilers = initTestFileCompilers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbXBpbGVyL2NvbXBpbGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw4RUFBNkM7QUFDN0MsNkRBQXlFO0FBQ3pFLG9GQUEwRTtBQUMxRSx1RkFBaUY7QUFDakYseUZBQXFGO0FBQ3JGLGtFQUEwRDtBQUMxRCxzRkFBOEU7QUFDOUUscUdBQTRFO0FBRTVFLFNBQVMsdUJBQXVCLENBQUUsZUFBZSxHQUFHLEVBQUUsRUFBRSxFQUFFLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUU7SUFDM0YsT0FBTztRQUNILElBQUksOEJBQXNCLENBQUMsNkJBQVUsQ0FBQyxhQUFhLENBQUM7UUFDcEQsSUFBSSxrQkFBc0IsQ0FBQyxFQUFFLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQzlELElBQUksa0JBQTBCLENBQUMsZUFBZSxDQUFDLGdDQUFxQixDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFDckgsSUFBSSxrQkFBNEIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQzdDLElBQUksYUFBbUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3BDLElBQUksa0JBQXdCLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQztLQUM1QyxDQUFDO0FBQ04sQ0FBQztBQUVELElBQUksaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0FBRTNCLFNBQWdCLG9CQUFvQjtJQUNoQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTTtRQUN6QixxQkFBcUIsRUFBRSxDQUFDO0lBRTVCLE9BQU8saUJBQWlCLENBQUM7QUFDN0IsQ0FBQztBQUxELG9EQUtDO0FBRUQsU0FBZ0IscUJBQXFCLENBQUUsZUFBZSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRTtJQUMzRixpQkFBaUIsR0FBRyx1QkFBdUIsQ0FBQyxlQUFlLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQ3JHLENBQUM7QUFGRCxzREFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBoYW1tZXJoZWFkIGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuaW1wb3J0IHsgQ29tcGlsZXIgYXMgTGVnYWN5VGVzdEZpbGVDb21waWxlciB9IGZyb20gJ3Rlc3RjYWZlLWxlZ2FjeS1hcGknO1xuaW1wb3J0IEVzTmV4dFRlc3RGaWxlQ29tcGlsZXIgZnJvbSAnLi90ZXN0LWZpbGUvZm9ybWF0cy9lcy1uZXh0L2NvbXBpbGVyJztcbmltcG9ydCBUeXBlU2NyaXB0VGVzdEZpbGVDb21waWxlciBmcm9tICcuL3Rlc3QtZmlsZS9mb3JtYXRzL3R5cGVzY3JpcHQvY29tcGlsZXInO1xuaW1wb3J0IENvZmZlZVNjcmlwdFRlc3RGaWxlQ29tcGlsZXIgZnJvbSAnLi90ZXN0LWZpbGUvZm9ybWF0cy9jb2ZmZWVzY3JpcHQvY29tcGlsZXInO1xuaW1wb3J0IFJhd1Rlc3RGaWxlQ29tcGlsZXIgZnJvbSAnLi90ZXN0LWZpbGUvZm9ybWF0cy9yYXcnO1xuaW1wb3J0IERldlRvb2xzVGVzdEZpbGVDb21waWxlciBmcm9tICcuL3Rlc3QtZmlsZS9mb3JtYXRzL2Rldi10b29scy9jb21waWxlcic7XG5pbXBvcnQgQ3VzdG9taXphYmxlQ29tcGlsZXJzIGZyb20gJy4uL2NvbmZpZ3VyYXRpb24vY3VzdG9taXphYmxlLWNvbXBpbGVycyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRlc3RGaWxlQ29tcGlsZXJzIChjb21waWxlck9wdGlvbnMgPSB7fSwgeyBpc0NvbXBpbGVyU2VydmljZU1vZGUsIGJhc2VVcmwgfSA9IHt9KSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgbmV3IExlZ2FjeVRlc3RGaWxlQ29tcGlsZXIoaGFtbWVyaGVhZC5wcm9jZXNzU2NyaXB0KSxcbiAgICAgICAgbmV3IEVzTmV4dFRlc3RGaWxlQ29tcGlsZXIoeyBpc0NvbXBpbGVyU2VydmljZU1vZGUsIGJhc2VVcmwgfSksXG4gICAgICAgIG5ldyBUeXBlU2NyaXB0VGVzdEZpbGVDb21waWxlcihjb21waWxlck9wdGlvbnNbQ3VzdG9taXphYmxlQ29tcGlsZXJzLnR5cGVzY3JpcHRdLCB7IGlzQ29tcGlsZXJTZXJ2aWNlTW9kZSwgYmFzZVVybCB9KSxcbiAgICAgICAgbmV3IENvZmZlZVNjcmlwdFRlc3RGaWxlQ29tcGlsZXIoeyBiYXNlVXJsIH0pLFxuICAgICAgICBuZXcgUmF3VGVzdEZpbGVDb21waWxlcih7IGJhc2VVcmwgfSksXG4gICAgICAgIG5ldyBEZXZUb29sc1Rlc3RGaWxlQ29tcGlsZXIoeyBiYXNlVXJsIH0pLFxuICAgIF07XG59XG5cbmxldCB0ZXN0RmlsZUNvbXBpbGVycyA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGVzdEZpbGVDb21waWxlcnMgKCkge1xuICAgIGlmICghdGVzdEZpbGVDb21waWxlcnMubGVuZ3RoKVxuICAgICAgICBpbml0VGVzdEZpbGVDb21waWxlcnMoKTtcblxuICAgIHJldHVybiB0ZXN0RmlsZUNvbXBpbGVycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRUZXN0RmlsZUNvbXBpbGVycyAoY29tcGlsZXJPcHRpb25zLCB7IGlzQ29tcGlsZXJTZXJ2aWNlTW9kZSwgYmFzZVVybCB9ID0ge30pIHtcbiAgICB0ZXN0RmlsZUNvbXBpbGVycyA9IGNyZWF0ZVRlc3RGaWxlQ29tcGlsZXJzKGNvbXBpbGVyT3B0aW9ucywgeyBpc0NvbXBpbGVyU2VydmljZU1vZGUsIGJhc2VVcmwgfSk7XG59XG4iXX0=