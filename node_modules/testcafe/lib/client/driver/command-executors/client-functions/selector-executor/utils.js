"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isArrayOfNodes = exports.castToArray = exports.isNodeCollection = exports.visible = void 0;
// @ts-ignore
const hammerhead_1 = require("../../../deps/hammerhead");
// @ts-ignore
const testcafe_core_1 = require("../../../deps/testcafe-core");
// @ts-ignore
const testcafe_ui_1 = require("../../../deps/testcafe-ui");
const position_1 = require("../../../../core/utils/position");
function visible(el) {
    if (testcafe_core_1.domUtils.isIframeElement(el))
        return position_1.isIframeVisible(el);
    if (!hammerhead_1.utils.dom.isDomElement(el) && !hammerhead_1.utils.dom.isTextNode(el))
        return false;
    if (testcafe_core_1.domUtils.isOptionElement(el) || testcafe_core_1.domUtils.getTagName(el) === 'optgroup')
        return testcafe_ui_1.selectElement.isOptionElementVisible(el);
    return position_1.isElementVisible(el);
}
exports.visible = visible;
function isNodeCollection(obj) {
    return obj instanceof hammerhead_1.nativeMethods.HTMLCollection || obj instanceof hammerhead_1.nativeMethods.NodeList;
}
exports.isNodeCollection = isNodeCollection;
function castToArray(list) {
    const length = list.length;
    const result = [];
    for (let i = 0; i < length; i++)
        result.push(list[i]);
    return result;
}
exports.castToArray = castToArray;
function isArrayOfNodes(obj) {
    if (!hammerhead_1.nativeMethods.isArray(obj))
        return false;
    for (let i = 0; i < obj.length; i++) {
        // @ts-ignore
        if (!(obj[i] instanceof hammerhead_1.nativeMethods.Node))
            return false;
    }
    return true;
}
exports.isArrayOfNodes = isArrayOfNodes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY2xpZW50L2RyaXZlci9jb21tYW5kLWV4ZWN1dG9ycy9jbGllbnQtZnVuY3Rpb25zL3NlbGVjdG9yLWV4ZWN1dG9yL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGFBQWE7QUFDYix5REFBZ0U7QUFDaEUsYUFBYTtBQUNiLCtEQUF1RDtBQUN2RCxhQUFhO0FBQ2IsMkRBQTBEO0FBQzFELDhEQUFvRjtBQUdwRixTQUFnQixPQUFPLENBQUUsRUFBUTtJQUM3QixJQUFJLHdCQUFRLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUM1QixPQUFPLDBCQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFL0IsSUFBSSxDQUFDLGtCQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDeEQsT0FBTyxLQUFLLENBQUM7SUFFakIsSUFBSSx3QkFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsSUFBSSx3QkFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFhLENBQUMsS0FBSyxVQUFVO1FBQ2pGLE9BQU8sMkJBQWEsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVwRCxPQUFPLDJCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFYRCwwQkFXQztBQUVELFNBQWdCLGdCQUFnQixDQUFFLEdBQVk7SUFDMUMsT0FBTyxHQUFHLFlBQVksMEJBQWEsQ0FBQyxjQUFjLElBQUksR0FBRyxZQUFZLDBCQUFhLENBQUMsUUFBUSxDQUFDO0FBQ2hHLENBQUM7QUFGRCw0Q0FFQztBQUVELFNBQWdCLFdBQVcsQ0FBRSxJQUErQjtJQUN4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzNCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUVsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRTtRQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXpCLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFSRCxrQ0FRQztBQUVELFNBQWdCLGNBQWMsQ0FBRSxHQUFZO0lBQ3hDLElBQUksQ0FBQywwQkFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDM0IsT0FBTyxLQUFLLENBQUM7SUFFakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFJLEdBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDekMsYUFBYTtRQUNiLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSwwQkFBYSxDQUFDLElBQUksQ0FBQztZQUN2QyxPQUFPLEtBQUssQ0FBQztLQUNwQjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFYRCx3Q0FXQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IG5hdGl2ZU1ldGhvZHMsIHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vZGVwcy9oYW1tZXJoZWFkJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IGRvbVV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vZGVwcy90ZXN0Y2FmZS1jb3JlJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IHNlbGVjdEVsZW1lbnQgfSBmcm9tICcuLi8uLi8uLi9kZXBzL3Rlc3RjYWZlLXVpJztcbmltcG9ydCB7IGlzRWxlbWVudFZpc2libGUsIGlzSWZyYW1lVmlzaWJsZSB9IGZyb20gJy4uLy4uLy4uLy4uL2NvcmUvdXRpbHMvcG9zaXRpb24nO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpYmxlIChlbDogTm9kZSk6IGJvb2xlYW4ge1xuICAgIGlmIChkb21VdGlscy5pc0lmcmFtZUVsZW1lbnQoZWwpKVxuICAgICAgICByZXR1cm4gaXNJZnJhbWVWaXNpYmxlKGVsKTtcblxuICAgIGlmICghdXRpbHMuZG9tLmlzRG9tRWxlbWVudChlbCkgJiYgIXV0aWxzLmRvbS5pc1RleHROb2RlKGVsKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKGRvbVV0aWxzLmlzT3B0aW9uRWxlbWVudChlbCkgfHwgZG9tVXRpbHMuZ2V0VGFnTmFtZShlbCBhcyBFbGVtZW50KSA9PT0gJ29wdGdyb3VwJylcbiAgICAgICAgcmV0dXJuIHNlbGVjdEVsZW1lbnQuaXNPcHRpb25FbGVtZW50VmlzaWJsZShlbCk7XG5cbiAgICByZXR1cm4gaXNFbGVtZW50VmlzaWJsZShlbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVDb2xsZWN0aW9uIChvYmo6IHVua25vd24pOiBvYmogaXMgSFRNTENvbGxlY3Rpb24gfCBOb2RlTGlzdCB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIG5hdGl2ZU1ldGhvZHMuSFRNTENvbGxlY3Rpb24gfHwgb2JqIGluc3RhbmNlb2YgbmF0aXZlTWV0aG9kcy5Ob2RlTGlzdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhc3RUb0FycmF5IChsaXN0OiBIVE1MQ29sbGVjdGlvbiB8IE5vZGVMaXN0KTogTm9kZVtdIHtcbiAgICBjb25zdCBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgIHJlc3VsdC5wdXNoKGxpc3RbaV0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlPZk5vZGVzIChvYmo6IHVua25vd24pOiBvYmogaXMgTm9kZVtdIHtcbiAgICBpZiAoIW5hdGl2ZU1ldGhvZHMuaXNBcnJheShvYmopKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IChvYmogYXMgW10pLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKCEob2JqW2ldIGluc3RhbmNlb2YgbmF0aXZlTWV0aG9kcy5Ob2RlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiJdfQ==