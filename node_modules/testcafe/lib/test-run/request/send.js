"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const create_request_options_1 = require("./create-request-options");
const process_response_data_1 = require("./process-response-data");
const http_headers_1 = __importDefault(require("../../utils/http-headers"));
const runtime_1 = require("../../errors/runtime");
const lodash_1 = require("lodash");
const types_1 = require("../../errors/types");
async function send(testRun, options, callsite) {
    const currentPageUrl = new URL(await testRun.getCurrentUrl());
    const requestOptions = await create_request_options_1.createRequestOptions(currentPageUrl, testRun, options, callsite);
    const request = new testcafe_hammerhead_1.DestinationRequest(requestOptions);
    const dataWaiter = new Promise(resolve => {
        request.on('response', (res) => resolve(res));
        request.on('error', (err) => resolve(err.message));
        request.on('fatalError', (message) => resolve(message));
    });
    const data = await dataWaiter;
    if (typeof data === 'string')
        throw new runtime_1.RequestRuntimeError(callsite, types_1.RUNTIME_ERRORS.requestRuntimeError, data.replace(/<.*?>/g, ''));
    const setCookie = data.headers[http_headers_1.default.setCookie];
    const sameOrigin = !currentPageUrl.host || testcafe_hammerhead_1.sameOriginCheck(currentPageUrl.href, requestOptions.url);
    if (setCookie && (sameOrigin || options.withCredentials))
        testRun.session.cookies.copySyncCookies(lodash_1.castArray(setCookie).join(';'), currentPageUrl.href);
    const body = await process_response_data_1.processResponseData(data, options.rawResponse);
    return {
        status: data.statusCode,
        statusText: data.statusMessage,
        headers: data.headers,
        body: body,
    };
}
exports.default = send;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9yZXF1ZXN0L3NlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSw2REFBMEU7QUFHMUUscUVBQWdFO0FBQ2hFLG1FQUE4RDtBQUM5RCw0RUFBb0Q7QUFDcEQsa0RBQTJEO0FBRTNELG1DQUFtQztBQUNuQyw4Q0FBb0Q7QUFJcEQsS0FBSyxVQUFVLElBQUksQ0FBRSxPQUFnQixFQUFFLE9BQStCLEVBQUUsUUFBK0I7SUFDbkcsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUM5RCxNQUFNLGNBQWMsR0FBRyxNQUFNLDZDQUFvQixDQUFDLGNBQWMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzlGLE1BQU0sT0FBTyxHQUFVLElBQUksd0NBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDOUQsTUFBTSxVQUFVLEdBQU8sSUFBSSxPQUFPLENBQWlDLE9BQU8sQ0FBQyxFQUFFO1FBQ3pFLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBMEIsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFVLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMxRCxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLElBQUksR0FBRyxNQUFNLFVBQVUsQ0FBQztJQUU5QixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVE7UUFDeEIsTUFBTSxJQUFJLDZCQUFtQixDQUFDLFFBQVEsRUFBRSxzQkFBYyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFNUcsTUFBTSxTQUFTLEdBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sVUFBVSxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksSUFBSSxxQ0FBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBHLElBQUksU0FBUyxJQUFJLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUM7UUFDcEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLGtCQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVqRyxNQUFNLElBQUksR0FBRyxNQUFNLDJDQUFtQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFbEUsT0FBTztRQUNILE1BQU0sRUFBTSxJQUFJLENBQUMsVUFBVTtRQUMzQixVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWE7UUFDOUIsT0FBTyxFQUFLLElBQUksQ0FBQyxPQUFPO1FBQ3hCLElBQUksRUFBUSxJQUFJO0tBQ25CLENBQUM7QUFDTixDQUFDO0FBRUQsa0JBQWUsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlc3RSdW4gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgRGVzdGluYXRpb25SZXF1ZXN0LCBzYW1lT3JpZ2luQ2hlY2sgfSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcbmltcG9ydCB7IEluY29taW5nTWVzc2FnZSB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0IHsgRXh0ZXJuYWxSZXF1ZXN0T3B0aW9ucywgUmVzcG9uc2VPcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGNyZWF0ZVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi9jcmVhdGUtcmVxdWVzdC1vcHRpb25zJztcbmltcG9ydCB7IHByb2Nlc3NSZXNwb25zZURhdGEgfSBmcm9tICcuL3Byb2Nlc3MtcmVzcG9uc2UtZGF0YSc7XG5pbXBvcnQgSFRUUF9IRUFERVJTIGZyb20gJy4uLy4uL3V0aWxzL2h0dHAtaGVhZGVycyc7XG5pbXBvcnQgeyBSZXF1ZXN0UnVudGltZUVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzL3J1bnRpbWUnO1xuaW1wb3J0IHsgQ2FsbHNpdGVSZWNvcmQgfSBmcm9tICdjYWxsc2l0ZS1yZWNvcmQnO1xuaW1wb3J0IHsgY2FzdEFycmF5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFJVTlRJTUVfRVJST1JTIH0gZnJvbSAnLi4vLi4vZXJyb3JzL3R5cGVzJztcblxudHlwZSBTdHJpY3RJbmNvbWluZ01lc3NhZ2UgPSBJbmNvbWluZ01lc3NhZ2UgJiB7IHN0YXR1c0NvZGU6IG51bWJlcjsgc3RhdHVzTWVzc2FnZTogc3RyaW5nIH07XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmQgKHRlc3RSdW46IFRlc3RSdW4sIG9wdGlvbnM6IEV4dGVybmFsUmVxdWVzdE9wdGlvbnMsIGNhbGxzaXRlOiBDYWxsc2l0ZVJlY29yZCB8IG51bGwpOiBQcm9taXNlPFJlc3BvbnNlT3B0aW9ucz4ge1xuICAgIGNvbnN0IGN1cnJlbnRQYWdlVXJsID0gbmV3IFVSTChhd2FpdCB0ZXN0UnVuLmdldEN1cnJlbnRVcmwoKSk7XG4gICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSBhd2FpdCBjcmVhdGVSZXF1ZXN0T3B0aW9ucyhjdXJyZW50UGFnZVVybCwgdGVzdFJ1biwgb3B0aW9ucywgY2FsbHNpdGUpO1xuICAgIGNvbnN0IHJlcXVlc3QgICAgICAgID0gbmV3IERlc3RpbmF0aW9uUmVxdWVzdChyZXF1ZXN0T3B0aW9ucyk7XG4gICAgY29uc3QgZGF0YVdhaXRlciAgICAgPSBuZXcgUHJvbWlzZTxTdHJpY3RJbmNvbWluZ01lc3NhZ2UgfCBzdHJpbmc+KHJlc29sdmUgPT4ge1xuICAgICAgICByZXF1ZXN0Lm9uKCdyZXNwb25zZScsIChyZXM6IFN0cmljdEluY29taW5nTWVzc2FnZSkgPT4gcmVzb2x2ZShyZXMpKTtcbiAgICAgICAgcmVxdWVzdC5vbignZXJyb3InLCAoZXJyOiBFcnJvcikgPT4gcmVzb2x2ZShlcnIubWVzc2FnZSkpO1xuICAgICAgICByZXF1ZXN0Lm9uKCdmYXRhbEVycm9yJywgKG1lc3NhZ2U6IHN0cmluZykgPT4gcmVzb2x2ZShtZXNzYWdlKSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgZGF0YVdhaXRlcjtcblxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBSZXF1ZXN0UnVudGltZUVycm9yKGNhbGxzaXRlLCBSVU5USU1FX0VSUk9SUy5yZXF1ZXN0UnVudGltZUVycm9yLCBkYXRhLnJlcGxhY2UoLzwuKj8+L2csICcnKSk7XG5cbiAgICBjb25zdCBzZXRDb29raWUgID0gZGF0YS5oZWFkZXJzW0hUVFBfSEVBREVSUy5zZXRDb29raWVdO1xuICAgIGNvbnN0IHNhbWVPcmlnaW4gPSAhY3VycmVudFBhZ2VVcmwuaG9zdCB8fCBzYW1lT3JpZ2luQ2hlY2soY3VycmVudFBhZ2VVcmwuaHJlZiwgcmVxdWVzdE9wdGlvbnMudXJsKTtcblxuICAgIGlmIChzZXRDb29raWUgJiYgKHNhbWVPcmlnaW4gfHwgb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMpIClcbiAgICAgICAgdGVzdFJ1bi5zZXNzaW9uLmNvb2tpZXMuY29weVN5bmNDb29raWVzKGNhc3RBcnJheShzZXRDb29raWUpLmpvaW4oJzsnKSwgY3VycmVudFBhZ2VVcmwuaHJlZik7XG5cbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcHJvY2Vzc1Jlc3BvbnNlRGF0YShkYXRhLCBvcHRpb25zLnJhd1Jlc3BvbnNlKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogICAgIGRhdGEuc3RhdHVzQ29kZSxcbiAgICAgICAgc3RhdHVzVGV4dDogZGF0YS5zdGF0dXNNZXNzYWdlLFxuICAgICAgICBoZWFkZXJzOiAgICBkYXRhLmhlYWRlcnMsXG4gICAgICAgIGJvZHk6ICAgICAgIGJvZHksXG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2VuZDtcbiJdfQ==