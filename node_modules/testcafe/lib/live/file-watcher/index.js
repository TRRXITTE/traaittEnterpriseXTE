"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const fs_1 = __importDefault(require("fs"));
const modules_graph_1 = __importDefault(require("./modules-graph"));
const node_modules_folder_name_1 = __importDefault(require("../../utils/node-modules-folder-name"));
const to_posix_path_1 = __importDefault(require("../../utils/to-posix-path"));
const WATCH_LOCKED_TIMEOUT = 700;
let instance = null;
const BABEL_PRESET_STAGE_2_MODULE_PATH = 'lib/compiler/babel/preset-stage-2.js';
class FileWatcher extends events_1.default {
    constructor() {
        super();
        if (!instance) {
            this.watchers = {};
            this.lockedFiles = {};
            this.modulesGraph = null;
            this.lastChangedFiles = [];
            instance = this;
        }
        return instance;
    }
    _onChanged(controller, file) {
        const cache = require.cache;
        if (!this.modulesGraph) {
            this.modulesGraph = new modules_graph_1.default();
            this.modulesGraph.build(cache, Object.keys(this.watchers));
        }
        else {
            this.lastChangedFiles.forEach(changedFile => this.modulesGraph.rebuildNode(cache, changedFile));
            this.lastChangedFiles = [];
        }
        this.lastChangedFiles.push(file);
        this.modulesGraph.clearParentsCache(cache, file);
        controller.runTests(true);
    }
    _watch(controller, file) {
        if (this.lockedFiles[file])
            return;
        this.lockedFiles[file] = setTimeout(() => {
            this._onChanged(controller, file);
            delete this.lockedFiles[file];
        }, WATCH_LOCKED_TIMEOUT);
    }
    stop() {
        Object.values(this.watchers).forEach(watcher => {
            watcher.close();
        });
    }
    addFile(controller, file) {
        if (this.watchers[file] || !FileWatcher.shouldWatchFile(file))
            return;
        if (this.modulesGraph) {
            this.lastChangedFiles.push(file);
            this.modulesGraph.addNode(file, require.cache);
        }
        this.watchers[file] = fs_1.default.watch(file, () => this._watch(controller, file));
    }
    static shouldWatchFile(file) {
        return !file.includes(node_modules_folder_name_1.default) &&
            !to_posix_path_1.default(file).includes(BABEL_PRESET_STAGE_2_MODULE_PATH);
    }
}
exports.default = FileWatcher;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGl2ZS9maWxlLXdhdGNoZXIvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxvREFBa0M7QUFDbEMsNENBQW9CO0FBQ3BCLG9FQUEyQztBQUMzQyxvR0FBZ0U7QUFDaEUsOEVBQW9EO0FBRXBELE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0FBRWpDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQztBQUVwQixNQUFNLGdDQUFnQyxHQUFHLHNDQUFzQyxDQUFDO0FBRWhGLE1BQXFCLFdBQVksU0FBUSxnQkFBWTtJQUNqRDtRQUNJLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLElBQUksQ0FBQyxRQUFRLEdBQVcsRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxXQUFXLEdBQVEsRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxZQUFZLEdBQU8sSUFBSSxDQUFDO1lBQzdCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7WUFFM0IsUUFBUSxHQUFHLElBQUksQ0FBQztTQUNuQjtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxVQUFVLENBQUUsVUFBVSxFQUFFLElBQUk7UUFDeEIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUU1QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNwQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksdUJBQVksRUFBRSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQzlEO2FBQ0k7WUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDaEcsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFakQsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsTUFBTSxDQUFFLFVBQVUsRUFBRSxJQUFJO1FBQ3BCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDdEIsT0FBTztRQUVYLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNyQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVsQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUk7UUFDQSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0MsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE9BQU8sQ0FBRSxVQUFVLEVBQUUsSUFBSTtRQUNyQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztZQUN6RCxPQUFPO1FBRVgsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsRDtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBRSxJQUFJO1FBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGtDQUFZLENBQUM7WUFDL0IsQ0FBQyx1QkFBVyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Q0FDSjtBQW5FRCw4QkFtRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IE1vZHVsZXNHcmFwaCBmcm9tICcuL21vZHVsZXMtZ3JhcGgnO1xuaW1wb3J0IE5PREVfTU9EVUxFUyBmcm9tICcuLi8uLi91dGlscy9ub2RlLW1vZHVsZXMtZm9sZGVyLW5hbWUnO1xuaW1wb3J0IHRvUG9zaXhQYXRoIGZyb20gJy4uLy4uL3V0aWxzL3RvLXBvc2l4LXBhdGgnO1xuXG5jb25zdCBXQVRDSF9MT0NLRURfVElNRU9VVCA9IDcwMDtcblxubGV0IGluc3RhbmNlID0gbnVsbDtcblxuY29uc3QgQkFCRUxfUFJFU0VUX1NUQUdFXzJfTU9EVUxFX1BBVEggPSAnbGliL2NvbXBpbGVyL2JhYmVsL3ByZXNldC1zdGFnZS0yLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZVdhdGNoZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLndhdGNoZXJzICAgICAgICAgPSB7fTtcbiAgICAgICAgICAgIHRoaXMubG9ja2VkRmlsZXMgICAgICA9IHt9O1xuICAgICAgICAgICAgdGhpcy5tb2R1bGVzR3JhcGggICAgID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubGFzdENoYW5nZWRGaWxlcyA9IFtdO1xuXG4gICAgICAgICAgICBpbnN0YW5jZSA9IHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgX29uQ2hhbmdlZCAoY29udHJvbGxlciwgZmlsZSkge1xuICAgICAgICBjb25zdCBjYWNoZSA9IHJlcXVpcmUuY2FjaGU7XG5cbiAgICAgICAgaWYgKCF0aGlzLm1vZHVsZXNHcmFwaCkge1xuICAgICAgICAgICAgdGhpcy5tb2R1bGVzR3JhcGggPSBuZXcgTW9kdWxlc0dyYXBoKCk7XG4gICAgICAgICAgICB0aGlzLm1vZHVsZXNHcmFwaC5idWlsZChjYWNoZSwgT2JqZWN0LmtleXModGhpcy53YXRjaGVycykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYXN0Q2hhbmdlZEZpbGVzLmZvckVhY2goY2hhbmdlZEZpbGUgPT4gdGhpcy5tb2R1bGVzR3JhcGgucmVidWlsZE5vZGUoY2FjaGUsIGNoYW5nZWRGaWxlKSk7XG4gICAgICAgICAgICB0aGlzLmxhc3RDaGFuZ2VkRmlsZXMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGFzdENoYW5nZWRGaWxlcy5wdXNoKGZpbGUpO1xuICAgICAgICB0aGlzLm1vZHVsZXNHcmFwaC5jbGVhclBhcmVudHNDYWNoZShjYWNoZSwgZmlsZSk7XG5cbiAgICAgICAgY29udHJvbGxlci5ydW5UZXN0cyh0cnVlKTtcbiAgICB9XG5cbiAgICBfd2F0Y2ggKGNvbnRyb2xsZXIsIGZpbGUpIHtcbiAgICAgICAgaWYgKHRoaXMubG9ja2VkRmlsZXNbZmlsZV0pXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdGhpcy5sb2NrZWRGaWxlc1tmaWxlXSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2VkKGNvbnRyb2xsZXIsIGZpbGUpO1xuXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5sb2NrZWRGaWxlc1tmaWxlXTtcbiAgICAgICAgfSwgV0FUQ0hfTE9DS0VEX1RJTUVPVVQpO1xuICAgIH1cblxuICAgIHN0b3AgKCkge1xuICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMud2F0Y2hlcnMpLmZvckVhY2god2F0Y2hlciA9PiB7XG4gICAgICAgICAgICB3YXRjaGVyLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZEZpbGUgKGNvbnRyb2xsZXIsIGZpbGUpIHtcbiAgICAgICAgaWYgKHRoaXMud2F0Y2hlcnNbZmlsZV0gfHwgIUZpbGVXYXRjaGVyLnNob3VsZFdhdGNoRmlsZShmaWxlKSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5tb2R1bGVzR3JhcGgpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdENoYW5nZWRGaWxlcy5wdXNoKGZpbGUpO1xuICAgICAgICAgICAgdGhpcy5tb2R1bGVzR3JhcGguYWRkTm9kZShmaWxlLCByZXF1aXJlLmNhY2hlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMud2F0Y2hlcnNbZmlsZV0gPSBmcy53YXRjaChmaWxlLCAoKSA9PiB0aGlzLl93YXRjaChjb250cm9sbGVyLCBmaWxlKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNob3VsZFdhdGNoRmlsZSAoZmlsZSkge1xuICAgICAgICByZXR1cm4gIWZpbGUuaW5jbHVkZXMoTk9ERV9NT0RVTEVTKSAmJlxuICAgICAgICAgICAgIXRvUG9zaXhQYXRoKGZpbGUpLmluY2x1ZGVzKEJBQkVMX1BSRVNFVF9TVEFHRV8yX01PRFVMRV9QQVRIKTtcbiAgICB9XG59XG4iXX0=