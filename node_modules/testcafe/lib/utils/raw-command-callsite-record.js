"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RawCommandCallsiteRecord = exports.renderers = exports.HtmlRender = exports.NoColorRender = exports.Render = void 0;
const chalk_1 = __importDefault(require("chalk"));
const lodash_1 = require("lodash");
class Render {
    static getCommandStr(command) {
        const { type, assertionType, selector, actual, expected, } = command;
        const mainStr = `${lodash_1.upperFirst(lodash_1.camelCase(type))} (${(assertionType ? actual === null || actual === void 0 ? void 0 : actual.value : selector === null || selector === void 0 ? void 0 : selector.value) || ''})`;
        const subStr = assertionType ? ` ${assertionType} (${(expected === null || expected === void 0 ? void 0 : expected.value) || ''})` : '';
        return `${mainStr}${subStr}`;
    }
    static codeFrame(str) {
        return str;
    }
    static commandLine(num, command, base) {
        let commandNum = `${base ? ' > ' : '   '}${num} `;
        if (base)
            commandNum = chalk_1.default.bgRed(commandNum);
        return `${commandNum}|${Render.getCommandStr(command)}\n`;
    }
}
exports.Render = Render;
class NoColorRender extends Render {
    static commandLine(num, command, base) {
        const commandNum = `${base ? ' > ' : '   '}${num} `;
        return `${commandNum}|${Render.getCommandStr(command)}\n`;
    }
}
exports.NoColorRender = NoColorRender;
class HtmlRender extends Render {
    static codeFrame(str) {
        return '<div class="code-frame">' + str + '</div>';
    }
    static commandLine(num, command, base) {
        const numClass = base ? 'code-line-num-base' : 'code-line-num';
        return `<div class="code-line">` +
            `<div class="${numClass}">${num}</div>` +
            `<div class="code-line-src">${Render.getCommandStr(command)}</div>` +
            `</div>`;
    }
}
exports.HtmlRender = HtmlRender;
exports.renderers = {
    default: Render,
    html: HtmlRender,
    noColor: NoColorRender,
};
class RawCommandCallsiteRecord {
    constructor(actionId, list) {
        this.actionId = actionId;
        this._list = list;
    }
    renderSync(opts) {
        const { renderer = Render, frameSize = 1, codeFrame = true, } = opts;
        if (!codeFrame)
            return '';
        const baseId = this._list.findIndex(item => item.actionId === this.actionId);
        if (baseId < 0)
            return '';
        const firstId = Math.max(baseId - frameSize, 0);
        const lastId = Math.min(baseId + frameSize, this._list.length - 1);
        let frame = '';
        for (let i = firstId; i <= lastId; i++)
            frame += renderer.commandLine(i + 1, this._list[i], i === baseId);
        return renderer.codeFrame(frame);
    }
}
exports.RawCommandCallsiteRecord = RawCommandCallsiteRecord;
//# sourceMappingURL=data:application/json;base64,