"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const connection_1 = __importDefault(require("../../../../connection"));
const injectables_1 = require("../../../../../assets/injectables");
const HTTP_STATUS_OK = 200;
class RequestsInterceptor {
    constructor(browserId) {
        this._browserId = browserId;
    }
    _getResponseAsString(response) {
        return response.base64Encoded
            ? Buffer.from(response.body, 'base64').toString()
            : response.body;
    }
    async _prepareInjectableResources() {
        const browserConnection = connection_1.default.getById(this._browserId);
        const proxy = browserConnection.browserConnectionGateway.proxy;
        const windowId = browserConnection.activeWindowId;
        const taskScript = await browserConnection.currentJob.currentTestRun.session.getTaskScript({
            referer: '',
            cookieUrl: '',
            isIframe: false,
            withPayload: true,
            serverInfo: proxy.server1Info,
            windowId,
        });
        const injectableResources = {
            stylesheets: [
                injectables_1.TESTCAFE_UI_STYLES,
            ],
            scripts: [
                ...testcafe_hammerhead_1.INJECTABLE_SCRIPTS,
                ...injectables_1.SCRIPTS,
            ],
            embeddedScripts: [taskScript],
        };
        injectableResources.scripts = injectableResources.scripts.map(script => proxy.resolveRelativeServiceUrl(script));
        injectableResources.stylesheets = injectableResources.stylesheets.map(style => proxy.resolveRelativeServiceUrl(style));
        return injectableResources;
    }
    async setup(client) {
        const fetchAllDocumentsPattern = {
            urlPattern: '*',
            resourceType: 'Document',
            requestStage: 'Response',
        };
        await client.Fetch.enable({ patterns: [fetchAllDocumentsPattern] });
        client.Fetch.on('requestPaused', async (params) => {
            const { requestId, responseHeaders, responseStatusCode, } = params;
            const responseObj = await client.Fetch.getResponseBody({ requestId });
            const responseStr = this._getResponseAsString(responseObj);
            const injectableResources = await this._prepareInjectableResources();
            const updatedResponseStr = testcafe_hammerhead_1.injectResources(responseStr, injectableResources);
            await client.Fetch.fulfillRequest({
                requestId,
                responseCode: responseStatusCode || HTTP_STATUS_OK,
                responseHeaders: responseHeaders || [],
                body: Buffer.from(updatedResponseStr).toString('base64'),
            });
        });
    }
}
exports.default = RequestsInterceptor;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdHMtaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYnJvd3Nlci9wcm92aWRlci9idWlsdC1pbi9kZWRpY2F0ZWQvY2hyb21lL3JlcXVlc3RzLWludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsNkRBSTZCO0FBQzdCLHdFQUF1RDtBQUN2RCxtRUFBZ0Y7QUFFaEYsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDO0FBRTNCLE1BQXFCLG1CQUFtQjtJQUdwQyxZQUFvQixTQUFpQjtRQUNqQyxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztJQUNoQyxDQUFDO0lBRU8sb0JBQW9CLENBQUUsUUFBaUM7UUFDM0QsT0FBTyxRQUFRLENBQUMsYUFBYTtZQUN6QixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUNqRCxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztJQUN4QixDQUFDO0lBRU8sS0FBSyxDQUFDLDJCQUEyQjtRQUNyQyxNQUFNLGlCQUFpQixHQUFHLG9CQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFzQixDQUFDO1FBQzFGLE1BQU0sS0FBSyxHQUFlLGlCQUFpQixDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQztRQUMzRSxNQUFNLFFBQVEsR0FBWSxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7UUFFM0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDdkYsT0FBTyxFQUFNLEVBQUU7WUFDZixTQUFTLEVBQUksRUFBRTtZQUNmLFFBQVEsRUFBSyxLQUFLO1lBQ2xCLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLFVBQVUsRUFBRyxLQUFLLENBQUMsV0FBVztZQUM5QixRQUFRO1NBQ1gsQ0FBQyxDQUFDO1FBRUgsTUFBTSxtQkFBbUIsR0FBRztZQUN4QixXQUFXLEVBQUU7Z0JBQ1QsZ0NBQWtCO2FBQ3JCO1lBQ0QsT0FBTyxFQUFFO2dCQUNMLEdBQUcsd0NBQTZCO2dCQUNoQyxHQUFHLHFCQUFPO2FBQ2I7WUFDRCxlQUFlLEVBQUUsQ0FBQyxVQUFVLENBQUM7U0FDaEMsQ0FBQztRQUVGLG1CQUFtQixDQUFDLE9BQU8sR0FBTyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDckgsbUJBQW1CLENBQUMsV0FBVyxHQUFHLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUV2SCxPQUFPLG1CQUFtQixDQUFDO0lBQy9CLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFFLE1BQW1CO1FBQ25DLE1BQU0sd0JBQXdCLEdBQUc7WUFDN0IsVUFBVSxFQUFJLEdBQUc7WUFDakIsWUFBWSxFQUFFLFVBQVU7WUFDeEIsWUFBWSxFQUFFLFVBQVU7U0FDVCxDQUFDO1FBRXBCLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVwRSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLE1BQTBCLEVBQUUsRUFBRTtZQUNsRSxNQUFNLEVBQ0YsU0FBUyxFQUNULGVBQWUsRUFDZixrQkFBa0IsR0FDckIsR0FBRyxNQUFNLENBQUM7WUFFWCxNQUFNLFdBQVcsR0FBVyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztZQUM5RSxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbkUsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1lBQ3JFLE1BQU0sa0JBQWtCLEdBQUkscUNBQWUsQ0FBQyxXQUFXLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztZQUU5RSxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDO2dCQUM5QixTQUFTO2dCQUNULFlBQVksRUFBSyxrQkFBa0IsSUFBSSxjQUFjO2dCQUNyRCxlQUFlLEVBQUUsZUFBZSxJQUFJLEVBQUU7Z0JBQ3RDLElBQUksRUFBYSxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQzthQUN0RSxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQXpFRCxzQ0F5RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm90b2NvbEFwaSB9IGZyb20gJ2Nocm9tZS1yZW1vdGUtaW50ZXJmYWNlJztcbmltcG9ydCBQcm90b2NvbCBmcm9tICdkZXZ0b29scy1wcm90b2NvbCc7XG5pbXBvcnQgUmVxdWVzdFBhdXNlZEV2ZW50ID0gUHJvdG9jb2wuRmV0Y2guUmVxdWVzdFBhdXNlZEV2ZW50O1xuaW1wb3J0IFJlcXVlc3RQYXR0ZXJuID0gUHJvdG9jb2wuRmV0Y2guUmVxdWVzdFBhdHRlcm47XG5pbXBvcnQgR2V0UmVzcG9uc2VCb2R5UmVzcG9uc2UgPSBQcm90b2NvbC5GZXRjaC5HZXRSZXNwb25zZUJvZHlSZXNwb25zZTtcbmltcG9ydCB7XG4gICAgaW5qZWN0UmVzb3VyY2VzLFxuICAgIFBhZ2VJbmplY3RhYmxlUmVzb3VyY2VzLFxuICAgIElOSkVDVEFCTEVfU0NSSVBUUyBhcyBIQU1NRVJIRUFEX0lOSkVDVEFCTEVfU0NSSVBUUyxcbn0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5pbXBvcnQgQnJvd3NlckNvbm5lY3Rpb24gZnJvbSAnLi4vLi4vLi4vLi4vY29ubmVjdGlvbic7XG5pbXBvcnQgeyBTQ1JJUFRTLCBURVNUQ0FGRV9VSV9TVFlMRVMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9hc3NldHMvaW5qZWN0YWJsZXMnO1xuXG5jb25zdCBIVFRQX1NUQVRVU19PSyA9IDIwMDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVxdWVzdHNJbnRlcmNlcHRvciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfYnJvd3NlcklkOiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGJyb3dzZXJJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2Jyb3dzZXJJZCA9IGJyb3dzZXJJZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRSZXNwb25zZUFzU3RyaW5nIChyZXNwb25zZTogR2V0UmVzcG9uc2VCb2R5UmVzcG9uc2UpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuYmFzZTY0RW5jb2RlZFxuICAgICAgICAgICAgPyBCdWZmZXIuZnJvbShyZXNwb25zZS5ib2R5LCAnYmFzZTY0JykudG9TdHJpbmcoKVxuICAgICAgICAgICAgOiByZXNwb25zZS5ib2R5O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgX3ByZXBhcmVJbmplY3RhYmxlUmVzb3VyY2VzICgpOiBQcm9taXNlPFBhZ2VJbmplY3RhYmxlUmVzb3VyY2VzPiB7XG4gICAgICAgIGNvbnN0IGJyb3dzZXJDb25uZWN0aW9uID0gQnJvd3NlckNvbm5lY3Rpb24uZ2V0QnlJZCh0aGlzLl9icm93c2VySWQpIGFzIEJyb3dzZXJDb25uZWN0aW9uO1xuICAgICAgICBjb25zdCBwcm94eSAgICAgICAgICAgICA9IGJyb3dzZXJDb25uZWN0aW9uLmJyb3dzZXJDb25uZWN0aW9uR2F0ZXdheS5wcm94eTtcbiAgICAgICAgY29uc3Qgd2luZG93SWQgICAgICAgICAgPSBicm93c2VyQ29ubmVjdGlvbi5hY3RpdmVXaW5kb3dJZDtcblxuICAgICAgICBjb25zdCB0YXNrU2NyaXB0ID0gYXdhaXQgYnJvd3NlckNvbm5lY3Rpb24uY3VycmVudEpvYi5jdXJyZW50VGVzdFJ1bi5zZXNzaW9uLmdldFRhc2tTY3JpcHQoe1xuICAgICAgICAgICAgcmVmZXJlcjogICAgICcnLFxuICAgICAgICAgICAgY29va2llVXJsOiAgICcnLFxuICAgICAgICAgICAgaXNJZnJhbWU6ICAgIGZhbHNlLFxuICAgICAgICAgICAgd2l0aFBheWxvYWQ6IHRydWUsXG4gICAgICAgICAgICBzZXJ2ZXJJbmZvOiAgcHJveHkuc2VydmVyMUluZm8sXG4gICAgICAgICAgICB3aW5kb3dJZCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgaW5qZWN0YWJsZVJlc291cmNlcyA9IHtcbiAgICAgICAgICAgIHN0eWxlc2hlZXRzOiBbXG4gICAgICAgICAgICAgICAgVEVTVENBRkVfVUlfU1RZTEVTLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHNjcmlwdHM6IFtcbiAgICAgICAgICAgICAgICAuLi5IQU1NRVJIRUFEX0lOSkVDVEFCTEVfU0NSSVBUUyxcbiAgICAgICAgICAgICAgICAuLi5TQ1JJUFRTLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGVtYmVkZGVkU2NyaXB0czogW3Rhc2tTY3JpcHRdLFxuICAgICAgICB9O1xuXG4gICAgICAgIGluamVjdGFibGVSZXNvdXJjZXMuc2NyaXB0cyAgICAgPSBpbmplY3RhYmxlUmVzb3VyY2VzLnNjcmlwdHMubWFwKHNjcmlwdCA9PiBwcm94eS5yZXNvbHZlUmVsYXRpdmVTZXJ2aWNlVXJsKHNjcmlwdCkpO1xuICAgICAgICBpbmplY3RhYmxlUmVzb3VyY2VzLnN0eWxlc2hlZXRzID0gaW5qZWN0YWJsZVJlc291cmNlcy5zdHlsZXNoZWV0cy5tYXAoc3R5bGUgPT4gcHJveHkucmVzb2x2ZVJlbGF0aXZlU2VydmljZVVybChzdHlsZSkpO1xuXG4gICAgICAgIHJldHVybiBpbmplY3RhYmxlUmVzb3VyY2VzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzZXR1cCAoY2xpZW50OiBQcm90b2NvbEFwaSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBmZXRjaEFsbERvY3VtZW50c1BhdHRlcm4gPSB7XG4gICAgICAgICAgICB1cmxQYXR0ZXJuOiAgICcqJyxcbiAgICAgICAgICAgIHJlc291cmNlVHlwZTogJ0RvY3VtZW50JyxcbiAgICAgICAgICAgIHJlcXVlc3RTdGFnZTogJ1Jlc3BvbnNlJyxcbiAgICAgICAgfSBhcyBSZXF1ZXN0UGF0dGVybjtcblxuICAgICAgICBhd2FpdCBjbGllbnQuRmV0Y2guZW5hYmxlKHsgcGF0dGVybnM6IFtmZXRjaEFsbERvY3VtZW50c1BhdHRlcm5dIH0pO1xuXG4gICAgICAgIGNsaWVudC5GZXRjaC5vbigncmVxdWVzdFBhdXNlZCcsIGFzeW5jIChwYXJhbXM6IFJlcXVlc3RQYXVzZWRFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VTdGF0dXNDb2RlLFxuICAgICAgICAgICAgfSA9IHBhcmFtcztcblxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VPYmogICAgICAgICA9IGF3YWl0IGNsaWVudC5GZXRjaC5nZXRSZXNwb25zZUJvZHkoeyByZXF1ZXN0SWQgfSk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZVN0ciAgICAgICAgID0gdGhpcy5fZ2V0UmVzcG9uc2VBc1N0cmluZyhyZXNwb25zZU9iaik7XG4gICAgICAgICAgICBjb25zdCBpbmplY3RhYmxlUmVzb3VyY2VzID0gYXdhaXQgdGhpcy5fcHJlcGFyZUluamVjdGFibGVSZXNvdXJjZXMoKTtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRSZXNwb25zZVN0ciAgPSBpbmplY3RSZXNvdXJjZXMocmVzcG9uc2VTdHIsIGluamVjdGFibGVSZXNvdXJjZXMpO1xuXG4gICAgICAgICAgICBhd2FpdCBjbGllbnQuRmV0Y2guZnVsZmlsbFJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgICByZXNwb25zZUNvZGU6ICAgIHJlc3BvbnNlU3RhdHVzQ29kZSB8fCBIVFRQX1NUQVRVU19PSyxcbiAgICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyB8fCBbXSxcbiAgICAgICAgICAgICAgICBib2R5OiAgICAgICAgICAgIEJ1ZmZlci5mcm9tKHVwZGF0ZWRSZXNwb25zZVN0cikudG9TdHJpbmcoJ2Jhc2U2NCcpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==